# vi:filetype=sh

DATA_DIR="${PWD}/@DATA_DIR@"
export RPMCONFIGDIR="@RPMCONFIGDIR@"
export RPMLIBDIR="@CMAKE_INSTALL_FULL_LIBDIR@"
export PYTHON="@PYTHON@"
export RPM_XFAIL=${RPM_XFAIL-1}
DBFORMAT=$(awk '/^%_db_backend/{print $2}' "@INST_DIR@/@RPMCONFIGDIR@/macros")
TZ=UTC

export DBFORMAT TZ
unset SOURCE_DATE_EPOCH

CRYPTO=@CRYPTO@
if test x$CRYPTO = xlibgcrypt
then
    PGP=internal
elif test x$CRYPTO = xopenssl
then
    PGP=internal
elif test x$CRYPTO = xsequoia
then
    PGP=sequoia
else
    echo "Unhandled crypto backend: $CRYPTO"
    exit
fi

if test -x "@__FIND_DEBUGINFO@"; then
    DEBUGINFO_DISABLED=false;
else
    DEBUGINFO_DISABLED=true;
fi

if test "${PYTHON}"; then
    PYTHON_DISABLED=false;
else
    PYTHON_DISABLED=true;
fi

if [ "@WITH_CAP@" == "ON" ]; then
    CAP_DISABLED=false;
else
    CAP_DISABLED=true;
fi

MALLOC_DEBUG=libc_malloc_debug.so.0
if ! LD_PRELOAD=${MALLOC_DEBUG} /bin/true 2>&1 | grep -q ERROR; then
    MALLOC_PERTURB="$(awk 'BEGIN{srand(); printf "%d\n",(rand()*255)}')"
    LD_PRELOAD="${MALLOC_DEBUG}"
    GLIBC_TUNABLES="glibc.malloc.check=1:glibc.malloc.perturb=${MALLOC_PERTURB}"
    export LD_PRELOAD GLIBC_TUNABLES
fi

function runroot()
{
    sandbox exec "$@" --noplugins --nouserns
}

function runroot_other()
{
    sandbox exec "$@"
}

function rundebug()
{
    cp /data/macros.debug /@MACRO_DIR@/
    "$@"
    rm -f /@MACRO_DIR@/macros.debug
}

source ./sandbox
source ./mktree env

sandbox prune rpmtests.dir/*/merged

export -f runroot runroot_other rundebug
