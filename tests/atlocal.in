# vi:filetype=sh

RPMLIBDIR="@CMAKE_INSTALL_FULL_LIBDIR@"
RPMCONDIR="@RPMCONFIGDIR@"
export RPMLIBDIR RPMCONDIR

PYTHON=@PYTHON@

CRYPTO=@CRYPTO@
export CRYPTO
if test x$CRYPTO = xlibgcrypt
then
    PGP=internal
elif test x$CRYPTO = xopenssl
then
    PGP=internal
elif test x$CRYPTO = xsequoia
then
    PGP=sequoia
else
    echo "Unhandled crypto backend: $CRYPTO"
    exit
fi

RPMTREE=$PWD/@UTIL_DIR@:$PWD/@INST_DIR@:$PWD/@BASE_DIR@
RPMDATA="/data"

TZ=UTC
export TZ

unset SOURCE_DATE_EPOCH

RPM_XFAIL=${RPM_XFAIL-1}
if test -x "@__FIND_DEBUGINFO@"; then
    DEBUGINFO_DISABLED=false;
else
    DEBUGINFO_DISABLED=true;
fi
if test "${PYTHON}"; then
    PYTHON_DISABLED=false;
else
    PYTHON_DISABLED=true;
fi
if [ "@WITH_CAP@" == "ON" ]; then
    CAP_DISABLED=false;
else
    CAP_DISABLED=true;
fi

MALLOC_DEBUG=libc_malloc_debug.so.0
if ! LD_PRELOAD=${MALLOC_DEBUG} /bin/true 2>&1 | grep -q ERROR; then
    MALLOC_PERTURB="$(awk 'BEGIN{srand(); printf "%d\n",(rand()*255)}')"
    LD_PRELOAD="${MALLOC_DEBUG}"
    GLIBC_TUNABLES="glibc.malloc.check=1:glibc.malloc.perturb=${MALLOC_PERTURB}"
    export LD_PRELOAD GLIBC_TUNABLES
fi

function sandbox()
{
    local cmd=$1
    shift
    case $cmd in
        mount)
            mkdir -p $1/{upper,work} $RPMTEST
            mount -t overlay ${2:-sandbox} \
                  -o userxattr \
                  -o lowerdir=$RPMTREE \
                  -o upperdir=$1/upper \
                  -o workdir=$1/work \
                  $RPMTEST
        ;;
        umount)
            umount -l $RPMTEST
        ;;
        prune)
            for dir in "$@"; do
                [ -d $dir ] && umount -ql $dir
            done
        ;;
        exec)
            @BWRAP@ --unshare-pid --dev-bind $RPMTEST / \
                    --dev /dev --proc /proc --chdir / "$@"
        ;;
        shell)
            local cmd
            local source=$(findmnt -no SOURCE --mountpoint $RPMTEST)
            if [ "$1" == "--read-only" ]; then
                mount -o remount,ro $RPMTEST
                shift
            fi
            if [ $# == 0 ]; then
                cmd=$(grep ^root: $RPMTEST/etc/passwd | cut -d: -f7)
            else
                cmd=$1
                shift
            fi
            sandbox exec --unshare-uts --hostname $source \
                         --clearenv --setenv HOME /root \
                         --bind $PWD /srv --chdir /srv $cmd "$@"
        ;;
    esac
}

function run()
{
    runroot "$@"
}

function rundebug()
{
    cp ${RPMTEST}/data/macros.debug ${RPMTEST}/@MACRO_DIR@/
    run "$@"
    rm -f ${RPMTEST}/@MACRO_DIR@/macros.debug
}

function runroot()
{
    sandbox exec "$@" \
            --define "_buildhost testhost" \
            --define "_topdir /build" \
            --noplugins --nouserns
}

function runroot_other()
{
    sandbox exec "$@"
}

sandbox prune rpmtests.dir/*/merged
return 0
