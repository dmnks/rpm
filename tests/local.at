AT_TESTED([bwrap])

m4_define([RPMTEST_SETUP],[[
if ! [ -d tree/ ]; then
    mkdir temp work tree
    mount -t overlay overlay \
	-o lowerdir=${RPMTEST}/inst:${RPMTEST}/base,upperdir=temp,workdir=work \
	tree
    mkdir -p tree/build
    ln -s ../data/SOURCES tree/build/
fi
export PREFIX="${PREFIX}"
export RPMTEST="${PWD}/tree"
export TOPDIR="${RPMTEST}/build"
export HOME="${RPMTEST}"
]])

m4_define([RPMDB_INIT],[
RPMTEST_SETUP
rm -rf "${RPMTEST}"`runroot rpm --eval '%_dbpath'`/*
runroot rpm --initdb
])

m4_define([RPMPY_RUN],[[
cat << EOF > ${RPMTEST}/test.py
# coding=utf-8
import rpm, sys, os
dbpath=rpm.expandMacro('%_dbpath')
rpm.addMacro('_dbpath', dbpath)
rpm.addMacro('_db_backend', os.getenv('DBFORMAT'))
def myprint(msg = ''):
    sys.stdout.write('%s\n' % msg)
$1
EOF
runroot_other python3 /test.py
]])

m4_define([RPMPY_CHECK],[
#AT_SKIP_IF([$PYTHON_DISABLED])
AT_CHECK([RPMPY_RUN([$1])], [], [$2], [$3])
])

m4_define([RPMPY_TEST],[
AT_SETUP([$1])
AT_KEYWORDS([python])
RPMDB_INIT
RPMPY_CHECK([$2], [$3], [$4])
RPMTEST_CLEANUP
])

m4_define([RPMTEST_CHECK],[
RPMTEST_SETUP
AT_CHECK($@)
])

m4_define([RPMTEST_CLEANUP],[
# Need -l since bwrap spawns a custom pid1 process which may hang around for a
# bit after the container terminates
umount -l tree
rm -rf temp work tree
AT_CLEANUP
])

# Enable colored test output if available
m4_ifdef([AT_COLOR_TESTS], [AT_COLOR_TESTS])

AT_INIT
