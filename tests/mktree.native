#!/bin/bash
#
# Native mktree backend
#
# Base: OCI image (host-native)
# RPM build: native
# Isolation of rpmtests: bwrap
# Optimized for: development
# Works without cmake: no

if [ $(id -u) != 0 ]; then
    @PODMAN@ unshare $0 "$@"
    exit
fi

source ./mktree.common

FROM=@OS_NAME@:@OS_VERSION@
IMAGE=rpm

TREE_DIR=$PWD/mktree.output
TAGS_DIR=$PWD/mktree.tags
SANDBOX_DIR=$PWD/mktree.sandbox
RPMINST=$TREE_DIR/inst

SHELL_MOTD="
Welcome to RPM @CMAKE_PROJECT_VERSION@ snapshot shell!

This is a container running a minimal version of the host
system in a writable snapshot, with the current RPM build
installed and ready to experiment with.

For any later RPM source changes to be reflected, re-enter
this target.

To throw away the snapshot and start over, run: make reset
"
ATSHELL_MOTD="
Welcome to RPM @CMAKE_PROJECT_VERSION@ Autotest shell!

This is like an interactive test with a writable snapshot
mounted at \$RPMTEST, with full host integration allowing
you to use your native tools to inspect and/or modify the
snapshot.

The usual test commands are available, e.g. runroot ...
To throw away the snapshot and start over, run: make reset

WARNING! This shell runs in a user namespace without file
system isolation so be cautious when using destructive
commands. Treat it like any other shell running on your
host.
"

mount_tree()
{
    tag -i base || $0 build
    trap : INT  # Continue on SIGINT
    RPMIMAG=base
    RPMBASE=$(@PODMAN@ image mount $(tag $RPMIMAG))
    RPMTREE=$RPMINST:$RPMBASE
    RPMTEST=$SANDBOX_DIR/tree
    if [ "$1" == "--read-only" ]; then
        mkdir -p $RPMINST/$PWD
        snapshot mount
    else
        snapshot mount $SANDBOX_DIR
    fi
}

umount_tree()
{
    @PODMAN@ image umount $(tag $RPMIMAG) >/dev/null
    snapshot umount
}

fix_perm()
{
    chmod -Rf u+rwX "$@"
}

# Manage local tags for Podman images
tag()
{
    # Handle options
    case $1 in
        # Tag existence check
        -e) test -f $TAGS_DIR/$2; return ;;
        # Image existence check
        -i) tag -e $2 && @PODMAN@ image exists $(tag $2); return ;;
        # Delete tag
        -d) rm -f $TAGS_DIR/$2; return ;;
    esac

    # Handle load/save
    if [ $# == 1 ]; then
        # Load tag
        cat $TAGS_DIR/$1
    else
        # Save tag
        mkdir -p $TAGS_DIR
        @PODMAN@ image inspect --format '{{.Id}}' $1 > $TAGS_DIR/$2
    fi
}

print_motd()
{
    echo "$1"
}

CMD=$1; shift
case $CMD in
    build)
        # Build base image
        @PODMAN@ build --from $FROM --target base -t $IMAGE .
        tag $IMAGE base

        # Build RPM layer natively
        rm -rf "$RPMINST"
        make_install $RPMINST

        # Signal change to build system
        touch $TREE_DIR
    ;;
    atshell)
        set -a
        source ./atlocal
        mount_tree
        print_motd "$ATSHELL_MOTD"
        $SHELL
        umount_tree
        fix_perm $SANDBOX_DIR
    ;;
    shell)
        mount_tree
        print_motd "$SHELL_MOTD"
        snapshot shell "$@"
        umount_tree
        fix_perm $SANDBOX_DIR
    ;;
    check)
        mount_tree --read-only
        snapshot exec --tmpfs /tmp --bind $PWD $PWD --bind $RPMBASE /mnt \
                      --setenv RPMTREE $RPMINST:/mnt rpmtests -C $PWD "$@"
        umount_tree
        fix_perm rpmtests.dir
    ;;
    reset)
        rm -rf "$SANDBOX_DIR"
    ;;
esac
