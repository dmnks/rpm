#!/bin/sh

# Native mktree backend using an OS-specific bootstrap script and lightweight
# bwrap sandboxing.

source ./mktree.common

OS_BUILD=./mktree.@OS_NAME@

TREE_DIR=$PWD/mktree.output
BASE_DIR=$TREE_DIR/base
INST_DIR=$TREE_DIR/inst
SAND_DIR=$PWD/mktree.sandbox
ENV_FILE=$BASE_DIR/$ENV_FILE

ROOTLESS=${ROOTLESS:-1}
if [ $ROOTLESS == 1 ]; then
    MOUNT_ARGS="-o userxattr"
else
    MOUNT_ARGS=""
fi

CMD=$1; shift

# Manage lightweight bwrap containers on top of a directory tree
function sandbox()
{
    local cmd=$1
    shift
    case $cmd in
        mount)
            mkdir -p $1/upper $1/work ${RPMTEST}
            mount -t overlay ${2:-sandbox} \
                  -o lowerdir="${RPMTREE}" \
                  -o upperdir=$1/upper \
                  -o workdir=$1/work \
                  ${MOUNT_ARGS} ${RPMTEST}
            mount --bind /dev $RPMTEST/dev/
        ;;
        umount)
            umount -ql $RPMTEST/dev
            umount -ql $RPMTEST
        ;;
        prune)
            local dir
            for dir in "$@"; do
                [ -d "$dir" ] && umount -ql $dir
            done
            return 0
        ;;
        exec)
            @BWRAP@ --unshare-pid --dev-bind $RPMTEST / --clearenv \
                    --setenv PATH "@CMAKE_INSTALL_FULL_BINDIR@:/usr/bin:/usr/sbin" \
                    --setenv HOME / --dev /dev --proc /proc --chdir / "$@"
        ;;
        exec2)
            (export PATH="@CMAKE_INSTALL_FULL_BINDIR@:/usr/bin:/usr/sbin";
            export HOME=/;
            chroot $RPMTEST "$@";)
        ;;
        shell)
            local source=$(findmnt -no SOURCE --mountpoint $RPMTEST)
            local passwd=$RPMTEST/etc/passwd
            if [ $# == 0 ]; then
                if [ -f "$passwd" ]; then
                    set -- $(grep ^root: $passwd | cut -d: -f7)
                else
                    set -- sh
                fi
            fi
            sandbox exec --unshare-uts --hostname $source --clearenv \
                         --setenv HOME /root --bind $PWD /srv "$@"
        ;;
        init)
            RPMTREE=$INST_DIR:$BASE_DIR
            RPMTEST=$1/tree
            trap "sandbox umount $RPMTEST" EXIT
            sandbox mount $1
        ;;
    esac
}

# Run CMD in a user namespace (if not root already)
if [ $(id -u) != 0 ]; then
    if [ -f /run/.toolboxenv ]; then
        # toolbox(1) support
        UNSHARE="sudo --preserve-env"
    else
        UNSHARE="@UNSHARE@ -r --mount --map-auto"
    fi
    $UNSHARE $0 $CMD "$@"
    exit
fi

case $CMD in
    build)
        [ -d "$BASE_DIR" ] ||
        $OS_BUILD $BASE_DIR
        rm -rf $INST_DIR
        make_install $INST_DIR
    ;;
    env)
        set -a
        source ./atlocal
        [ -f "$ENV_FILE" ] && source $ENV_FILE
        sandbox init $SAND_DIR
        echo "$ENV_MOTD"
        $SHELL
        exit 0
    ;;
    shell)
        sandbox init $SAND_DIR
        sandbox shell "$@"
        exit 0
    ;;
    check)
        sandbox init $SAND_DIR
        sandbox shell --chdir /srv ./rpmtests "$@"
    ;;
    setup)
        :
    ;;
    reset)
        rm -rf $SAND_DIR
    ;;
    clean)
        rm -rf $BASE_DIR
    ;;
esac
