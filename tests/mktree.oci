#!/bin/bash
# OCI-native mktree backend

source ./mktree.common

DOCKERFILE=./Dockerfile.@OS_NAME@
IMAGE=rpm
IMAGE_BASE=${IMAGE}-base
SANDBOX=${IMAGE}-sandbox
CMD=$1; shift

# Run CMD in user namespace (if not root already)
function unshare()
{
    local cmd
    if [ $(id -u) == 0 ]; then
        return
    else
        cmd="podman unshare"
    fi
    $cmd $0 $CMD "$@"
    exit
}

# Run given command with sandbox mounted at RPMTEST
function run()
{
    set -a
    source ./atlocal
    ensure_image $IMAGE
    exists_sandbox || buildah from --name $SANDBOX $IMAGE >/dev/null
    dir=$(buildah mount $SANDBOX)
    RPMTREE=/
    RPMTEST=$dir
    "$@"
    buildah umount $SANDBOX >/dev/null
}

function ensure_image()
{
    if ! podman image exists $1; then
        echo >&2 "No image exists yet, run:"
        echo >&2 "  ./$PROGRAM build"
        exit 1
    fi
}

function exists_sandbox()
{
    buildah containers --format '{{ .ContainerName }}' | grep -q $SANDBOX
}

case $CMD in
    build)
        podman image exists $IMAGE_BASE ||
        podman build -t $IMAGE_BASE -f $DOCKERFILE @CMAKE_SOURCE_DIR@
    ;;
    install) unshare "$@"
        ensure_image $IMAGE_BASE
        name=$(buildah from $IMAGE_BASE)
        dir=$(buildah mount $name)

        if [ "$1" == "--reuse" ]; then
            cp -pr $2/* $dir/
        else
            install $dir
        fi

        podman image exists $IMAGE &&
        buildah rmi $IMAGE 2>/dev/null
        buildah commit $name $IMAGE
        buildah umount $name
        buildah rm $name
    ;;
    shell) unshare "$@"
        run sandbox shell "$@"
    ;;
    env) unshare
        run $SHELL
    ;;
    reset) unshare
        exists_sandbox || exit
        buildah rm $SANDBOX >/dev/null
    ;;
    clean)
        podman image exists $IMAGE_BASE &&
        podman rmi $IMAGE_BASE
    ;;
esac
