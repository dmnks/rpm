#!/bin/bash
#
# OCI-based mktree backend

PROGRAM=$(basename $0)
if [ "$PROGRAM" == "mktree" ]; then
    # Running from build directory
    PODMAN=@PODMAN@
    CONTEXT=@CMAKE_SOURCE_DIR@
    NATIVE=@MKTREE_NATIVE@
else
    # Running from source directory
    PODMAN=${MKTREE_PODMAN:-podman}
    CONTEXT=..
    NATIVE=no
fi

if [ $NATIVE == yes ]; then
    FROM="--from @OS_NAME@:@OS_VERSION@"
else
    FROM=
fi

IMAGE=rpm
BUILD_ARGS="-f Dockerfile $FROM $CONTEXT"
ROOTLESS=$([ $(id -u) == 0 ] && echo 0 || echo 1)
CMD=$1; shift

export ROOTLESS
source mktree.common

rpmtests()
{
    local args vol

    # Pass select options to $PODMAN
    case "$1" in
        # Useful for CI environments without a tty
        --interactive=*) args=$1; shift ;;
    esac

    # Mount a host directory to hold OverlayFS trees
    if [ $NATIVE == yes ]; then
        vol="$PWD:/srv:z"
    else
        vol="/srv"
    fi

    $PODMAN run --privileged -it --rm --read-only --tmpfs /tmp -v $vol $args \
                --workdir /srv -e ROOTLESS=$ROOTLESS $IMAGE rpmtests "$@"
}

unshared()
{
    [ $(id -u) != 0 ] && [ $NATIVE == yes ] || return
    $PODMAN unshare $0 $CMD "$@"
    exit
}

case $CMD in
    build) unshared
        # Build base image
        $PODMAN build --target base -t $IMAGE/base $BUILD_ARGS

        # Add RPM install on top
        [ -n "$($PODMAN images -q $IMAGE)" ] && $PODMAN rmi $IMAGE
        if [ $NATIVE == yes ]; then
            # Native build
            trap : INT
            id=$(@PODMAN@ create $IMAGE/base)
            make_install $(@PODMAN@ mount $id)
            @PODMAN@ commit -q $id $IMAGE
            @PODMAN@ rm $id >/dev/null
        else
            # Containerized build
            $PODMAN build --target full -t $IMAGE $BUILD_ARGS
        fi
    ;;
    check)
        rpmtests "$@"
    ;;
    atshell)
        rpmtests --shell
    ;;
    shell)
        rpmtests --shell snapshot shell
    ;;
    reset)
        rpmtests --reset
    ;;
esac
