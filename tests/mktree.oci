#!/bin/bash
#
# OCI-based mktree backend

set -e

PROGRAM=$(basename $0)
if [ "$PROGRAM" == "mktree" ]; then
    # Running from build directory
    CMAKE=yes
    NATIVE=@MKTREE_NATIVE@
    PODMAN=@PODMAN@
    CONTEXT=@CMAKE_SOURCE_DIR@
else
    # Running from source directory
    CMAKE=no
    NATIVE=no
    PODMAN=${MKTREE_ENGINE:-podman}
    CONTEXT=..
fi

if [ $NATIVE == yes ]; then
    FROM="--from @OS_NAME@:@OS_VERSION@"
else
    FROM=
fi

ARGS="-f Dockerfile $FROM $CONTEXT"
ROOTLESS=$([ $(id -u) == 0 ] && echo 0 || echo 1)
CMD=$1; shift

export ROOTLESS
source mktree.common

podman()
{
    local cmdline=
    local token=
    mkdir -p tags
    while [ $# != 0 ]; do
        token=$1; shift
        case $token in
            --tag)
                token="--iidfile tags/$1"
                shift
            ;;
            --image)
                token="$(cat tags/$1)"
                shift
            ;;
        esac
        cmdline="$cmdline $token"
    done
    echo $PODMAN $cmdline
}

rpmtests()
{
    local opts
    local vol="$PWD:/srv:z"

    # Pass select options to podman
    case "$1" in
        # Useful for CI environments without a tty
        --interactive=*) opts=$1; shift ;;
    esac

    # Don't keep the test artifacts around in non-cmake mode
    if [ $CMAKE == no ]; then
        set -- --log "$@"
        vol=/srv
    fi

    podman run --privileged -it --rm --read-only --tmpfs /tmp -v $vol \
               --workdir /srv -e ROOTLESS=$ROOTLESS $opts --image full \
               rpmtests "$@"
    podman rmi --no-prune --image full
}

unshared()
{
    [ $(id -u) != 0 ] && [ $NATIVE == yes ] || return 0
    podman unshare $0 $CMD "$@"
    exit
}

case $CMD in
    build) unshared
        # Build base image
        podman build --tag base --target base $ARGS

        # Add RPM install on top
        if [ -n "$(podman images -q --image full)" ]; then
            podman rmi --no-prune --image full
        fi
        if [ $NATIVE == yes ]; then
            # Native build
            id=$(podman create --image base)
            trap "podman rm $id >/dev/null" EXIT
            make_install $(podman mount $id)
            podman commit --tag full -q $id
        else
            # Standalone build
            podman build --tag full --target full $ARGS
        fi
    ;;
    check)
        rpmtests "$@"
    ;;
    atshell)
        rpmtests --shell "$@"
    ;;
    shell)
        rpmtests --shell snapshot shell
    ;;
    reset)
        rpmtests --reset
    ;;
esac
