#!/bin/sh

OS_BUILD=./mktree.@OS_NAME@

TREE_DIR=$PWD/mktree.output
BASE_DIR=$TREE_DIR/base
INST_DIR=$TREE_DIR/inst
SAND_DIR=$PWD/mktree.sandbox

ROOTLESS=${ROOTLESS:-1}
if [ $ROOTLESS == 1 ]; then
    MOUNT_ARGS="-o userxattr"
else
    MOUNT_ARGS=""
fi

ENV_MOTD="
Welcome to RPM test environment!

This is like an interactive test but with
full host integration.

Your test tree is mounted at \$RPMTEST.
You can use the usual test commands, e.g.

  runroot rpm ...
"

CMD=$1; shift

# Manage lightweight bwrap containers on top of a directory tree
function sandbox()
{
    local cmd=$1
    shift
    case $cmd in
        mount)
            mkdir -p $1/upper $1/work ${RPMTEST}
            mount -t overlay ${2:-sandbox} \
                  -o lowerdir="${RPMTREE}" \
                  -o upperdir=$1/upper \
                  -o workdir=$1/work \
                  ${MOUNT_ARGS} ${RPMTEST}
        ;;
        umount)
            umount -ql $RPMTEST
        ;;
        prune)
            local dir
            for dir in "$@"; do
                [ -d "$dir" ] && umount -ql $dir
            done
            return 0
        ;;
        exec)
            (unset RPM_CONFIGDIR RPM_POPTEXEC_PATH
             cd ${RPMTEST} && \
             FAKECHROOT_BASE="${RPMTEST}" fakechroot "$@"
            )
        ;;
        init)
            RPMTREE=$INST_DIR:$BASE_DIR
            RPMTEST=$1/tree
            trap "sandbox umount $RPMTEST" EXIT
            sandbox mount $1
        ;;
    esac
}

# Build and install RPM and the test-suite data into a directory
function make_install()
{
    export DESTDIR=$1
    local ld_conf_dir=$DESTDIR/@CMAKE_INSTALL_SYSCONFDIR@/ld.so.conf.d

    @CMAKE_MAKE_PROGRAM@ -C @CMAKE_BINARY_DIR@ install
    mkdir -p $ld_conf_dir
    echo @CMAKE_INSTALL_FULL_LIBDIR@ > $ld_conf_dir/rpm.conf
    ldconfig -r $DESTDIR @CMAKE_INSTALL_FULL_LIBDIR@

    cp -r @CMAKE_CURRENT_SOURCE_DIR@/data $DESTDIR/
    mkdir -p $DESTDIR/build
    ln -sf ../data/SOURCES $DESTDIR/build/
}

# Run CMD in a user namespace (if not root already)
if [ $(id -u) != 0 ]; then
    if [ -f /run/.toolboxenv ]; then
        # toolbox(1) support
        UNSHARE="sudo --preserve-env"
    else
        UNSHARE="@UNSHARE@ -r --mount --map-auto"
    fi
    $UNSHARE $0 $CMD "$@"
    exit
fi

case $CMD in
    build)
        [ -d "$BASE_DIR" ] ||
        $OS_BUILD $BASE_DIR
        rm -rf $INST_DIR
        make_install $INST_DIR
    ;;
    env)
        set -a
        source ./atlocal
        sandbox init $SAND_DIR
        echo "$ENV_MOTD"
        $SHELL
        exit 0
    ;;
    check)
        sandbox init $SAND_DIR
        ./rpmtests "$@"
    ;;
    setup)
        :
    ;;
    reset)
        rm -rf $SAND_DIR
    ;;
    clean)
        rm -rf $BASE_DIR
    ;;
esac
