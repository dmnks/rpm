#!/bin/bash

# Bootstrap a minimal filesystem tree with RPM's runtime dependencies that are
# ABI compatible with the build dependencies used.  Test-suite dependencies
# (see below) MUST also be included.  An existing RPM installation SHOULD NOT
# be included.
#
# This script MUST implement the "env" subcommand which MAY define handy
# OS-specific shell variables and/or functions for use in "make env" or do
# nothing otherwise.  Other commands MAY also be implemented for when the
# script is invoked directly (e.g. to manually install additional packages).
#
# When finished, the script MUST run the "mktree.extra" script from PWD if it
# exists and then exit with the return code 0.
#
# Useful CMake variables:
#   TREE_DIR: destination directory for the tree (relative to PWD)
#   UNSHARE_CMD: runs a program as root in a user namespace (if non-root user)
#   OS_VERSION: distribution version
#
# Test-suite dependencies:
#   bwrap cpio diff file gzip mount readelf sh tar /etc/passwd
#
# This script MUST work if executed as a regular user as well as root.

function dnf()
{
    local cachedir=$(python3 -c 'import dnf; print(dnf.conf.Conf().cachedir)')
    echo '%_netsharedpath %nil' > .rpmmacros
    @UNSHARE_CMD@ env HOME=$PWD /usr/bin/dnf \
        --installroot=$PWD/@TREE_DIR@ \
        --releasever=@OS_VERSION@ \
        --setopt=cachedir=$cachedir \
        --setopt=keepcache=1 \
        --setopt=install_weak_deps=0 \
        --disablerepo=\* --enablerepo=fedora,updates \
        --exclude=rpm "$@"
}

case $1 in
    env)
        function dnf() { /usr/bin/dnf --installroot=$RPMTEST "$@"; }
        return 0
    ;;
    # These are not required but handy for manual use
    install) shift
        dnf install "$@"
        exit 0
    ;;
    remove) shift
        dnf remove "$@"
        exit 0
    ;;
esac

# Bootstrap tree
dnf install -y \
    audit \
    bash \
    binutils \
    bubblewrap \
    bzip2 \
    coreutils \
    cpio \
    curl \
    debugedit \
    diffutils \
    elfutils-libelf \
    elfutils-libs \
    file \
    file-libs \
    findutils \
    gawk \
    gcc \
    gdb-headless \
    gdb-minimal \
    glibc \
    gpg \
    grep \
    gzip \
    ima-evm-utils \
    libacl \
    libarchive \
    libcap \
    libfsverity \
    libgomp \
    libzstd \
    lua-libs \
    make \
    openssl-libs \
    patch \
    pkgconf-pkg-config \
    python3 \
    rpm-sequoia \
    sed \
    sqlite-libs \
    tar \
    unzip \
    util-linux-core \
    xz \
    xz-libs \
    zlib \
    zstd

# Point in-tree RPM to newly installed database
@UNSHARE_CMD@ mkdir -p @TREE_DIR@/@MACRO_DIR@
echo "%_dbpath $(rpm --eval '%_dbpath')" |
    @UNSHARE_CMD@ tee @TREE_DIR@/@MACRO_DIR@/macros.dbpath >/dev/null

# Configure default shell for root user
@UNSHARE_CMD@ cp -r @TREE_DIR@/{etc/skel/.,/root}

export -f dnf
[ -x mktree.extra ] && ./mktree.extra
exit 0
