#!/bin/bash

# Bootstrap a minimal OS tree with RPM's runtime dependencies that are ABI
# compatible with the build dependencies used, without any pre-existing RPM
# installation and with the following test-suite dependencies:
#
#   bwrap cpio diff file gzip mount readelf sh tar /etc/passwd
#
# This script MUST implement the following subcommands:
#   build       creates the tree
#   clean       removes the tree
#   env         sets up OS-specific shell environment for "make env"
#
# Useful CMake variables:
#   BASE_DIR    destination directory for the tree (relative to PWD)
#   UNSHARE     runs a program as root in a user namespace (if non-root user)
#   OS_VERSION  distribution version
#
# This script MUST work if executed as a regular user as well as root.

function dnf()
{
    local cachedir=$(@PYTHON@ -c 'import dnf; print(dnf.conf.Conf().cachedir)')
    echo '%_netsharedpath %nil' > .rpmmacros
    @UNSHARE@ env HOME=$PWD /usr/bin/dnf \
        --installroot=$PWD/@BASE_DIR@ \
        --releasever=@OS_VERSION@ \
        --setopt=cachedir=$cachedir \
        --setopt=keepcache=1 \
        --setopt=install_weak_deps=0 \
        --disablerepo=\* --enablerepo=fedora,updates \
        --exclude=rpm "$@"
}

case $1 in
    build)
        dnf install -y \
            audit \
            bash \
            binutils \
            bubblewrap \
            bzip2 \
            coreutils \
            cpio \
            curl \
            debugedit \
            diffutils \
            elfutils-libelf \
            elfutils-libs \
            file \
            file-libs \
            findutils \
            gawk \
            gcc \
            gdb-headless \
            gdb-minimal \
            glibc \
            gpg \
            grep \
            gzip \
            ima-evm-utils \
            libacl \
            libarchive \
            libcap \
            libfsverity \
            libgomp \
            libzstd \
            lua-libs \
            make \
            openssl-libs \
            patch \
            pkgconf-pkg-config \
            python3 \
            rpm-sequoia \
            sed \
            sqlite-libs \
            tar \
            unzip \
            util-linux-core \
            xz \
            xz-libs \
            zlib \
            zstd

        # Point in-tree RPM to newly installed database
        @UNSHARE@ mkdir -p @BASE_DIR@/@MACRO_DIR@
        echo "%_dbpath $(rpm --eval '%_dbpath')" |
            @UNSHARE@ tee @BASE_DIR@/@MACRO_DIR@/macros.dbpath >/dev/null

        # Configure default shell for root user
        @UNSHARE@ cp -r @BASE_DIR@/{etc/skel/.,/root}
    ;;
    clean)
        @UNSHARE@ rm -rf @BASE_DIR@
    ;;
    env)
        function dnf() { /usr/bin/dnf --installroot=$RPMTEST "$@"; }
    ;;
esac
