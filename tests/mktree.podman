#!/bin/bash
#
# Podman-based mktree backend using an OCI image to build and run RPM.
# Works standalone (outside of a build directory) too.

PROGRAM=$(basename $0)
if [ "$PROGRAM" == "mktree" ]; then
    # Running from build directory
    CONTEXT=@CMAKE_SOURCE_DIR@
    source ./mktree.common
else
    # Running from source directory
    CONTEXT=..
fi
source ./snapshot

IMAGE=rpm
IMAGE_BASE=${IMAGE}-base
TREE_DIR=$PWD/mktree.dir

NAME=${IMAGE}-sandbox
SANDBOX=$PWD/mktree.sandbox

CMD=$1; shift

if [ $(id -u) != 0 ]; then
    podman unshare $0 $CMD "$@"
    exit
fi

mount_sandbox()
{
    cleanup()
    {
        snapshot umount
        podman image umount $IMAGE_BASE >/dev/null
        chmod -Rf u+rwX $SANDBOX
    }
    trap cleanup EXIT

    RPMTREE=$(podman image mount $IMAGE_BASE)
    RPMBASE=$(cat $TREE_DIR/base)
    RPMTEST=$SANDBOX/tree
    snapshot mount $SANDBOX
    make_install $RPMTEST
}

case $CMD in
    build)
        mkdir -p $TREE_DIR

        mode=$1
        case $mode in
            --native)
                if [ "$CONTEXT" == ".." ]; then
                    echo "Native build is not supported in source dir." >&2
                    exit 1
                fi
                target=base
            ;;
            --base)
                target=base
            ;;
            *)
                mode=--full
                target=full
            ;;
        esac

        # Build (base) image
        podman build --target $target -t $IMAGE_BASE -f Dockerfile $CONTEXT
        podman image inspect --format '{{.Id}}' $IMAGE_BASE > $TREE_DIR/base

        # Finish unless native mode was selected
        case $mode in
            --base) exit ;;
            --full)
                podman tag $IMAGE_BASE $IMAGE
                exit
            ;;
        esac

        # Build RPM natively, layer it on top
        name=$(buildah from $IMAGE_BASE)
        make_install --full $(buildah mount $name)
        {
            buildah rmi $IMAGE
            buildah commit -q $name $IMAGE
            buildah umount $name
            buildah rm $name
        } >/dev/null
        touch $TREE_DIR/full
    ;;
    check)
        cleanup()
        {
            podman image umount $IMAGE >/dev/null
            chmod -Rf u+rwX rpmtests.dir
        }
        trap cleanup EXIT

        RPMTEST=$(podman image mount $IMAGE)
        snapshot shell --tmpfs /tmp --chdir /srv mktree check "$@"
    ;;
    shell)
        mount_sandbox
        snapshot shell "$@"
    ;;
    test)
        set -a
        source ./atlocal
        mount_sandbox
        $SHELL
    ;;
    reset)
        rm -rf "$SANDBOX"
    ;;
esac
