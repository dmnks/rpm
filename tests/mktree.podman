#!/bin/bash
#
# Podman-based mktree backend using an OCI image to build and run RPM.
# Works standalone (outside of a build directory) too.

PROGRAM=$(basename $0)
CMD=$1; shift

TREE_DIR=${PWD}/mktree.dir
TAGS_DIR=${TREE_DIR}/tags
SNAP_DIR=${TREE_DIR}/snapshot

IMAGE=rpm

if [ $(id -u) != 0 ]; then
    podman unshare $0 $CMD "$@"
    exit
fi

if [ "$PROGRAM" == "mktree" ]; then
    # Running from build directory
    NATIVE=@MKTREE_NATIVE@
    CONTEXT=@CMAKE_SOURCE_DIR@
else
    # Running from source directory
    NATIVE=0
    CONTEXT=..
fi

SHELL_MOTD="
Welcome to RPM @CMAKE_PROJECT_VERSION@ container!

This is a container running a minimal version of the host
system in a writable snapshot, with the RPM build installed
and ready to experiment with.

To update the RPM installation with the latest source
changes, re-enter this target.
"

ATSHELL_MOTD="
Welcome to RPM @CMAKE_PROJECT_VERSION@ Autotest shell!

This is like an interactive test with a writable snapshot
mounted at \$RPMTEST, with full host integration allowing
you to use your native tools to inspect and/or modify the
snapshot.

The shell runs in a user namespace WITHOUT filesystem
isolation so be mindful when using destructive commands.
Treat it like any other shell running on your host.

The usual test commands are available, e.g.

  runroot rpm ...
"

print_motd()
{
    case $CMD in
        shell) echo "$SHELL_MOTD" ;;
        atshell) echo "$ATSHELL_MOTD" ;;
    esac
    echo "To throw away the snapshot and start over, run:"
    echo
    echo "  make reset"
    echo
    if [ $NEW_IMAGE == 1 ]; then
        echo "## --------------------------------------- ##"
        echo "## Image has been rebuilt, reset to apply. ##"
        echo "## --------------------------------------- ##"
        echo
    fi
}

fix_perm()
{
    chmod -Rf u+rwX $SNAP_DIR rpmtests.dir
}

tag_add()
{
    mkdir -p $TAGS_DIR
    podman image inspect --format '{{.Id}}' $1 > $TAGS_DIR/$2
}

tag_del()
{
    rm -f $TAGS_DIR/$1
}

tag_get()
{
    cat $TAGS_DIR/$1
}

tag_exists()
{
    test -f $TAGS_DIR/$1
}

mount_image()
{
    FULL_TAG=$(tag_get full)

    clean_up()
    {
        podman image umount $FULL_TAG >/dev/null
        fix_perm
    }
    trap clean_up EXIT

    RPMTEST=$(podman image mount $FULL_TAG)
}

mount_snapshot()
{
    BASE_TAG=$(tag_get base)

    clean_up()
    {
        snapshot umount
        podman image umount $SNAP_TAG >/dev/null
        fix_perm
    }
    trap clean_up EXIT

    tag_exists snap || tag_add $BASE_TAG snap
    SNAP_TAG=$(tag_get snap)

    if [ "$SNAP_TAG" == "$BASE_TAG" ]; then
        NEW_IMAGE=0
    else
        NEW_IMAGE=1
    fi

    RPMTREE=$(podman image mount $SNAP_TAG)
    RPMTEST=$SNAP_DIR/tree
    snapshot mount $SNAP_DIR

    [ $NATIVE == 1 ] && ./mktree.native build $RPMTEST
}

source ./snapshot

case $CMD in
    build)
        if [ "$1" == "--full" ]; then
            NATIVE=0
            shift
        fi

        if [ $NATIVE == 1 ]; then
            target=base
        else
            target=full
        fi

        # Build base image
        podman build --target $target -t $IMAGE -f Dockerfile $CONTEXT
        tag_add $IMAGE base

        # Signal change to build system
        touch $TREE_DIR

        # Promote to full tag and finish unless in native mode
        if [ $NATIVE == 0 ]; then
            tag_add $IMAGE full
            exit 0
        fi

        # Build RPM natively, layer it on top
        name=$(buildah from $IMAGE)
        ./mktree.native build $(buildah mount $name)
        {
            tag_exists full && buildah rmi $(tag_get full) 2>/dev/null
            buildah commit -q $name $IMAGE
            buildah umount $name
            buildah rm $name
        } >/dev/null
        tag_add $IMAGE full
    ;;
    check)
        mount_image
        snapshot exec --tmpfs /tmp --bind $PWD /srv --chdir /srv \
                      mktree check "$@"
    ;;
    shell)
        mount_snapshot
        print_motd
        snapshot shell "$@"
    ;;
    atshell)
        set -a
        source ./atlocal
        mount_snapshot
        print_motd
        $SHELL
    ;;
    reset)
        tag_del snap
        rm -rf "$SNAP_DIR"
    ;;
esac
