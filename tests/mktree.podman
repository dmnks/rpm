#!/bin/bash
#
# Podman-based mktree backend using an OCI image to build and run RPM.
# Works standalone (outside of a build directory) too.

PROGRAM=$(basename $0)
CMD=$1; shift

TREE_DIR=${PWD}/mktree.dir
TAGS_DIR=${TREE_DIR}/tags
SNAP_DIR=${TREE_DIR}/snapshot

IMAGE=rpm
IMAGE_BASE=rpm/base

if [ $(id -u) != 0 ]; then
    podman unshare $0 $CMD "$@"
    exit
fi

if [ "$PROGRAM" == "mktree" ]; then
    # Running from build directory
    NATIVE=@MKTREE_NATIVE@
    CONTEXT=@CMAKE_SOURCE_DIR@
else
    # Running from source directory
    NATIVE=0
    CONTEXT=..
fi

SHELL_MOTD="
Welcome to RPM @CMAKE_PROJECT_VERSION@ container!

This is a container running a minimal version of the host
system in a writable snapshot, with the RPM build installed
and ready to experiment with.

To update the RPM installation with the latest source
changes, re-enter this target.
"

ATSHELL_MOTD="
Welcome to RPM @CMAKE_PROJECT_VERSION@ Autotest shell!

This is like an interactive test with a writable snapshot
mounted at \$RPMTEST, with full host integration allowing
you to use your native tools to inspect and/or modify the
snapshot.

The shell runs in a user namespace WITHOUT filesystem
isolation so be mindful when using destructive commands.
Treat it like any other shell running on your host.

The usual test commands are available, e.g.

  runroot rpm ...
"

print_motd()
{
    case $CMD in
        shell) echo "$SHELL_MOTD" ;;
        atshell) echo "$ATSHELL_MOTD" ;;
    esac
    echo "To throw away the snapshot and start over, run:"
    echo
    echo "  make reset"
    echo
    if [ $NEW_IMAGE == 1 ]; then
        echo "## ------------------------------------- ##"
        echo "## New image available, reset to use it. ##"
        echo "## ------------------------------------- ##"
        echo
    fi
}

silent()
{
    if [ "$1" == "-f" ]; then
        shift
        "$@" >/dev/null 2>&1
    else
        "$@" >/dev/null
    fi
}

fix_perm()
{
    chmod -Rf u+rwX $SNAP_DIR rpmtests.dir
}

tag_add()
{
    mkdir -p $TAGS_DIR
    podman image inspect --format '{{.Id}}' $1 > $TAGS_DIR/$2
}

tag_del()
{
    rm -f $TAGS_DIR/$1
}

tag_get()
{
    cat $TAGS_DIR/$1
}

tag_exists()
{
    test -f $TAGS_DIR/$1
}

tag_base() { tag_get base; }
tag_full() { tag_get full; }
tag_snap() { tag_get snap; }

image_exists()
{
    tag_exists $1 && podman image exists $(tag_get $1)
}

mount_image()
{
    image_exists full || $0 build

    clean_up()
    {
        silent podman image umount $(tag_full)
        fix_perm
    }
    trap clean_up EXIT

    RPMTEST=$(podman image mount $(tag_full))
}

mount_snapshot()
{
    image_exists base || $0 build

    NEW_IMAGE=0
    if ! tag_exists snap; then
        tag_add $(tag_base) snap
    elif ! image_exists snap; then
        echo "Error: Image not found, fix by recreating the snapshot with:"
        echo
        echo "  make reset"
        exit 1
    elif [ "$(tag_snap)" != "$(tag_base)" ]; then
        NEW_IMAGE=1
    fi

    clean_up()
    {
        snapshot umount
        silent podman image umount $(tag_snap)
        fix_perm
    }
    trap clean_up EXIT

    RPMTREE=$(podman image mount $(tag_snap))
    RPMTEST=$SNAP_DIR/tree
    snapshot mount $SNAP_DIR

    [ $NATIVE == 1 ] && ./mktree.native build $RPMTEST
}

source ./snapshot

case $CMD in
    build)
        # Base image
        podman build --target base -t $IMAGE_BASE -f Dockerfile $CONTEXT
        tag_add $IMAGE_BASE base

        # Full image
        image_exists full && podman rmi $(tag_full)
        if [ $NATIVE == 0 ]; then
            # Isolated RPM build
            podman build --target full -t $IMAGE -f Dockerfile $CONTEXT
            # This is now also our snapshot base
            tag_add $IMAGE base
        else
            # Native RPM build
            name=$(buildah from $IMAGE_BASE)
            trap "silent buildah umount $name; silent buildah rm $name" EXIT
            ./mktree.native build $(buildah mount $name)
            silent buildah commit -q $name $IMAGE
        fi
        tag_add $IMAGE full
    ;;
    check)
        mount_image
        snapshot exec --tmpfs /tmp --bind $PWD /srv --chdir /srv \
                      mktree check "$@"
    ;;
    shell)
        mount_snapshot
        print_motd
        snapshot shell "$@"
    ;;
    atshell)
        set -a
        source ./atlocal
        mount_snapshot
        print_motd
        $SHELL
    ;;
    reset)
        tag_del snap
        rm -rf "$SNAP_DIR"
    ;;
    refresh)
    ;;
esac
