#!/bin/bash
# Podman-native mktree backend

source ./mktree.common

DOCKERFILE=./Dockerfile.@OS_NAME@
IMAGE=rpm
IMAGE_BASE=${IMAGE}-base
SANDBOX=${IMAGE}-sandbox
CMD=$1; shift

# Run CMD in user namespace (if not root already)
function unshare()
{
    local cmd
    if [ $(id -u) == 0 ]; then
        return
    else
        cmd="podman unshare"
    fi
    $cmd $0 $CMD "$@"
    exit
}

# Create sandbox container
function create()
{
    podman container exists $SANDBOX && return
    podman create --privileged -it --name $SANDBOX --hostname sandbox \
                  -v $PWD:/srv --workdir /srv "$@" $IMAGE >/dev/null
}

function ensure_image()
{
    if ! podman image exists $1; then
        echo "No image exists yet, run:"
        echo "  ./$PROGRAM build"
        exit 1
    fi
}

case $CMD in
    build) unshare
        podman image exists $IMAGE_BASE ||
        podman build --target base -t $IMAGE_BASE \
                     -f $DOCKERFILE @CMAKE_SOURCE_DIR@

        name=$(buildah from $IMAGE_BASE)
        install $(buildah mount $name)
        buildah rmi $IMAGE >/dev/null 2>&1
        buildah commit $name $IMAGE

        buildah umount $name >/dev/null
        buildah rm $name >/dev/null
    ;;
    shell) unshare "$@"
        if [ "$1" == "--read-only" ]; then
            ro=$1
            shift
        else
            ro=""
        fi

        if [ $# == 0 ]; then
            cmd=$(podman inspect -f '{{ join .Config.Cmd " " }}' rpm)
        else
            cmd=$1
            shift
        fi

        create $ro
        podman start $SANDBOX >/dev/null
        podman exec -it $SANDBOX $cmd "$@"
    ;;
    env) unshare
        ensure_image $IMAGE
        create
        set -a
        source ./atlocal
        RPMTREE=/
        RPMTEST=$(podman mount $SANDBOX)
        $SHELL
        podman umount $SANDBOX >/dev/null
    ;;
    reset)
        podman container exists $SANDBOX || exit
        podman kill $SANDBOX >/dev/null
        podman rm $SANDBOX >/dev/null
    ;;
    clean)
        podman image exists $IMAGE_BASE &&
        podman rmi $IMAGE_BASE >/dev/null

        podman image exists $IMAGE &&
        podman rmi $IMAGE >/dev/null
    ;;
esac
