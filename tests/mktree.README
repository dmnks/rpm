Writing mktree backends
-----------------------

The mktree executable is responsible for building a minimal OS filesystem tree
that includes an RPM installation built from these sources and its runtime and
test dependencies that are ABI compatible with the development headers used in
the build.  This tree is then used to spawn disposable containers on top that
run RPM tests or interactive shells.  The executable accepts a series of
commands described below.

Most Linux package managers such as DNF or Zypper allow for specifying a custom
root directory and OS version which makes them a good candidate for setting up
such a tree with matching library versions.  To support that, the final mktree
executable is made during CMake configuration by choosing a host-native backend
from this directory (files named with the "mktree." prefix), configuring it and
copying it to the CMake build directory under the name "mktree" which is then
invoked by "make tree" (a dependency of "make check" and "make shell").  It can
also be invoked directly from the tests/ binary directory if one wishes to skip
the CMake overhead.






Most backends should use the local RPM build artifacts to CONTINUE HERE

To install the local RPM artifacts, backends should run "make install" with the
appropriate DESTDIR setting.  This should produce a separate tree that can be
rebuilt independently and layered on top of the base tree which is mostly
static, in order for "make check" to run quickly.

To manage such overlays and containers, backends may use the snapshot() shell
function defined in the "atlocal" file (by sourcing it) which is used by the
test-suite to isolate writable tests from each other.  The function uses
Bubblewrap and OverlayFS to spawn lightweight containers on top of a set of
directories, see README for more information.

A reference implementation for Fedora Linux hosts (mktree.fedora) is available.
Developers wishing to test RPM on other distros are encouraged to write and
contribute a backend for their distro by copying and adjusting mktree.fedora as
needed.  Common logic can later be refactored into the mktree.common file.

On distros that don't have a native backend (yet), CMake will automatically
fall back to mktree.podman.  This backend uses the official Fedora OCI image to
completely isolate the build process (including CMake) from the host and reuses
the same image for the runtime (after removing the stock RPM installation from
it).  One downside is that a new CMake build is done from scratch on each "make
check" invocation.  The primary use case for this backend is for our CI
environment which runs the test-suite in disposable Ubuntu VMs, one per job.

Commands to implement
---------------------

* Command: build
