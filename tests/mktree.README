Writing mktree backends
-----------------------

The mktree executable is responsible for building a minimal OS filesystem tree
that includes an RPM installation built from source and its runtime and test
dependencies that are ABI compatible with the development headers used in the
build.  This tree is then used to spawn a disposable container on top that runs
the RPM test-suite (the rpmtests script) or an interactive shell for manual
testing.  The desired operation is triggered by issuing a command (see below)
and is normally invoked by "make tree" and other targets.

On most Linux distributions, the easiest way to bootstrap such a tree with
matching library versions is to use the native package manager (DNF, Zypper,
debootstrap, etc.) that allows for specifying a custom root directory and OS
version.  To support that, the mktree executable is created during CMake
configuration by choosing a suitable implementation (backend) from this source
directory, configuring it and copying it to the build directory under the
"mktree" name.

To install the local RPM artifacts, backends should run "make install" with the
appropriate DESTDIR setting.  This should produce a separate tree that can be
rebuilt independently and layered on top of the base tree which is mostly
static, in order for "make check" to run quickly.

To manage such overlays and containers, backends may use the snapshot() shell
function defined in the "atlocal" file (by sourcing it) which is used by the
test-suite to isolate writable tests from each other.  The function uses
Bubblewrap and OverlayFS to spawn lightweight containers on top of a set of
directories, see README for more information.

A reference implementation for Fedora Linux hosts (mktree.fedora) is available.
Developers wishing to test RPM on other distros are encouraged to write and
contribute a backend for their distro by copying and adjusting mktree.fedora as
needed.  Common logic can later be refactored into the mktree.common file.

On distros that don't have a native backend (yet), CMake will automatically
fall back to mktree.podman.  This backend uses the official Fedora OCI image to
completely isolate the build process (including CMake) from the host and reuses
the same image for the runtime (after removing the stock RPM installation from
it).  One downside is that a new CMake build is done from scratch on each "make
check" invocation.  The primary use case for this backend is for our CI
environment which runs the test-suite in disposable Ubuntu VMs, one per job.

Commands to implement
---------------------

* Command: build
