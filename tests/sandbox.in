#!/bin/bash

PROGNAME=$(basename $0)
LOWERDIR=$PWD/@UTIL_DIR@:$PWD/@INST_DIR@:$PWD/@TREE_DIR@
MOUNTCHECK="mountpoint -q"

function sandbox()
{
    local cmd=$1
    shift
    case $cmd in
        init)
            local dir=${1-.}
            echo $dir/merged
            $MOUNTCHECK $dir/merged && return
            mkdir -p $dir/{upper,work,merged}
            mount -t overlay overlay -o userxattr \
                  -o lowerdir=$LOWERDIR,upperdir=$dir/upper,workdir=$dir/work \
                  $dir/merged
        ;;
        umount)
            umount -l ${1-.}/merged
        ;;
        prune)
            local dir=${1-.}
            for dir in "$@"; do
                [ -d $dir/merged ] && umount -ql $dir/merged
            done
        ;;
        exec)
            @BWRAP@ --unshare-pid --dev-bind $1/merged / \
                    --dev /dev --proc /proc --chdir / \
                    --setenv PATH @CMAKE_INSTALL_PREFIX@/bin:/usr/bin "${@:2}"
        ;;
        run)
            local ro=0
            if [ "$1" == "--read-only" ]; then
                ro=1
                shift
            fi
            sandbox init $1 >/dev/null
            [ $ro == 1 ] && mount -o remount,ro $1/merged
            sandbox exec $1 --bind $PWD $PWD --chdir $PWD "${@:2}"
            sandbox umount $1
        ;;
        shell)
            sandbox run $1 env PS1="(shell)# " sh
        ;;
    esac
}

export LOWERDIR MOUNTCHECK
export -f sandbox

case $PROGNAME in
    rpmtests)
        # No need to scan the mount table (possibly faster)
        MOUNTCHECK="test -d"
    ;;
    sandbox)
        if [ $# == 0 ]; then
            @UNSHARE_CMD@ sh -c 'source '$0'; PS1="(namespace)# " sh'
        else
            @UNSHARE_CMD@ sh -c 'source '$0'; sandbox "$@"' 'sh' "$@"
        fi
    ;;
esac
